daemon:
    name: Core Message Director # To be used in page titles and intra-MD links.
    url: http://123.45.67.89/coremd/ # URL where the web interface may be located. Defaults to:
                                     # http://<web/bind>/

globals:
    eventlogger: 127.0.0.1:9090 # The IP:port of the Event Logger to be used when logging global events.
    dc_files: # A list of DC files to be loaded. ORDER IS SENSITIVE!
        - core.dc
        - game.dc
        - minigames.dc
    # This describes the existence of UberDOGs, which are objects that are assumed to exist statically.
    # anonymous specifies whether an uberdog can be accessed through the CA from an unauthenticated client.
    uberdogs:
      - id: 1234
        class: LoginManager
        anonymous: true #Default: false

web:
    bind: 0.0.0.0:80 # The webserver should listen on port 80, binding to all interfaces.
    # Authentication enables a BASIC authentication mechanism for the website
    #authentication:
    #    username: foo
    #    password: bar

messagedirector:
    bind: 0.0.0.0:6660
    #connect: 127.0.0.1:5555

# This describes the existence of UberDOGs, which are objects that are assumed to exist statically.
# anonymous specifies whether an uberdog can be accessed through the CA from an unauthenticated client.
uberdogs:
    - id: 1234
      class: LoginManager
      anonymous: true #Default: false

roles:
    # This section allows specifying roles that we would like this daemon to perform.
    # For example, let's have a client agent which listens on port 6667 on all interfaces:
    - type: clientagent
      bind: 0.0.0.0:6667
      # Client defines which client this client agent should generate when it receives a new
      # connection.  By default, it is a "libastron" client which accepts connections from a client
      # using the libastron ClientRepository library.
      #client: fooclient

    # Next we'll have a state server, whose control channel is 402000.
    - type: stateserver
      control: 402000

    # Now a database, which listens on channel 402001, generates objects with ids >= 100,000,000+ and
    # uses BerkeleyDB as a backing store.
    - type: database
      control: 402001
      generate:
      # Generate defines the range of DistributedObject ids that the database can create new objects with,
      # and is generally responsible for. Min and max are both optional fields.
        min: 100000000 # Required (no default)
      # max: 200000000 # Default: DOID_T_MAX (UINT_MAX)
      engine:
        type: bdb
        filename: main_database.db

    # We will then create a database state server which provides state-server-like behavior on database
    # objects.  The dbss does not have a control channel, and so cannot generate new objects.
    - type: dbss
      database: 402001 # The channel of the associated database
      ranges:
      # Ranges defines a sequence of ranges of DistributedObject ids that the database-state server
      # will provide stateserver-like behavior for.
      # Note: The ranges do not have to match that of the database. This allows for multiple dbss to
      #       split up the handling of a single database. Additionally, it can be used to exclude
      #       special-case or prepopulated objects from recieving SS behavior.
      # Warning: While this is currently allowed by the protocol, if the range of non-prepopulated
      #          object ids are incompletely-covered by DBSS or covered by multiple, erroneous
      #          behavior will occur.
      #          It is recommended to use seperate database roles for DBSS and non-DBSS objects.
        - min: 100000000
      #   max: 200000000

    # Let's also enable the Event Logger. The Event Logger does not listen on a channel; it uses a
    # separate UDP socket to listen for log events.
    - type: eventlogger
      bind: 0.0.0.0:9090 # REMEMBER: UDP
      output: /var/log/astron/eventlogger/el-%Y-%m-%d-%H-%M-%S.log # This is a time format.
      rotate_interval: 1d # Rotate the logs daily.
